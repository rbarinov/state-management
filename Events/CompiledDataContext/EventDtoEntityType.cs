// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Events.CompiledDataContext
{
    internal partial class EventDtoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Events.Data.EventDto",
                typeof(EventDto),
                baseEntityType);

            var globalVersion = runtimeEntityType.AddProperty(
                "GlobalVersion",
                typeof(int),
                propertyInfo: typeof(EventDto).GetProperty("GlobalVersion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<GlobalVersion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            globalVersion.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            globalVersion.AddAnnotation("Relational:ColumnName", "global_version");

            var eventAt = runtimeEntityType.AddProperty(
                "EventAt",
                typeof(DateTime),
                propertyInfo: typeof(EventDto).GetProperty("EventAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<EventAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            eventAt.AddAnnotation("Relational:ColumnName", "event_at");

            var payload = runtimeEntityType.AddProperty(
                "Payload",
                typeof(byte[]),
                propertyInfo: typeof(EventDto).GetProperty("Payload", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<Payload>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            payload.AddAnnotation("Relational:ColumnName", "payload");

            var streamId = runtimeEntityType.AddProperty(
                "StreamId",
                typeof(string),
                propertyInfo: typeof(EventDto).GetProperty("StreamId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<StreamId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 256);
            streamId.AddAnnotation("Relational:ColumnName", "stream_id");

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(string),
                propertyInfo: typeof(EventDto).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 256);
            type.AddAnnotation("Relational:ColumnName", "type");

            var version = runtimeEntityType.AddProperty(
                "Version",
                typeof(int),
                propertyInfo: typeof(EventDto).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            version.AddAnnotation("Relational:ColumnName", "version");

            var key = runtimeEntityType.AddKey(
                new[] { globalVersion });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_events");

            var index = runtimeEntityType.AddIndex(
                new[] { streamId });
            index.AddAnnotation("Relational:Name", "ix_events_stream_id");

            var index0 = runtimeEntityType.AddIndex(
                new[] { streamId, version },
                unique: true);
            index0.AddAnnotation("Relational:Name", "ix_events_stream_id_version");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StreamId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("StreamId")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Restrict,
                required: true);

            var stream = declaringEntityType.AddNavigation("Stream",
                runtimeForeignKey,
                onDependent: true,
                typeof(StreamDto),
                propertyInfo: typeof(EventDto).GetProperty("Stream", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventDto).GetField("<Stream>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var events = principalEntityType.AddNavigation("Events",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventDto>),
                propertyInfo: typeof(StreamDto).GetProperty("Events", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(StreamDto).GetField("<Events>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_events_stream_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "events");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
