// <auto-generated />
using Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Events.Data.Event", b =>
                {
                    b.Property<int>("GlobalVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("global_version");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlobalVersion"));

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("stream_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("GlobalVersion")
                        .HasName("pk_events");

                    b.HasIndex("StreamId")
                        .HasDatabaseName("ix_events_stream_id");

                    b.HasIndex("StreamId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_events_stream_id_version");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Events.Data.Stream", b =>
                {
                    b.Property<string>("StreamId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("stream_id");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("StreamId")
                        .HasName("pk_streams");

                    b.ToTable("streams", (string)null);
                });

            modelBuilder.Entity("Events.Data.Event", b =>
                {
                    b.HasOne("Events.Data.Stream", "Stream")
                        .WithMany("Events")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_events_stream_id");

                    b.Navigation("Stream");
                });

            modelBuilder.Entity("Events.Data.Stream", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
