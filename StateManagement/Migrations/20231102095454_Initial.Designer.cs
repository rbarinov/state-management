// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StateManagement.Data;

#nullable disable

namespace StateManagement.Migrations
{
    [DbContext(typeof(StateManagementDbContext))]
    [Migration("20231102095454_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StateManagement.Data.Entities.EventDto", b =>
                {
                    b.Property<int>("GlobalVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("global_version");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlobalVersion"));

                    b.Property<DateTime>("EventAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_at");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("stream_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("GlobalVersion")
                        .HasName("pk_events");

                    b.HasIndex("StreamId")
                        .HasDatabaseName("ix_events_stream_id");

                    b.HasIndex("StreamId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_events_stream_id_version");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("StateManagement.Data.Entities.StateDto", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("key");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<int?>("ReferenceVersion")
                        .HasColumnType("integer")
                        .HasColumnName("reference_version");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Key")
                        .HasName("pk_states");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("StateManagement.Data.Entities.StreamDto", b =>
                {
                    b.Property<string>("StreamId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("stream_id");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("StreamId")
                        .HasName("ak_streams_stream_id");

                    b.ToTable("streams", (string)null);
                });

            modelBuilder.Entity("StateManagement.Data.Entities.EventDto", b =>
                {
                    b.HasOne("StateManagement.Data.Entities.StreamDto", "Stream")
                        .WithMany("Events")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_events_streams_stream_id");

                    b.Navigation("Stream");
                });

            modelBuilder.Entity("StateManagement.Data.Entities.StreamDto", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
